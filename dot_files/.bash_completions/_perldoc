valid_name perldoc &&
_perldoc() {
    local lngopt shtopt split=false
    local cur prev

    COMPREPLY=()
    cur=$(_get_cword "=")
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    _expand || return 0

    lngopt='
    '

    shtopt='
        -d -D -f -F -h
        -i -l -L -m -M
        -n -o -q -r -t
        -T -u -v -V -w
        -X
    '
    #-h   Display this help message
    #-V   Report version
    #-r   Recursive search (slow)
    #-i   Ignore case
    #-t   Display pod using pod2text instead of Pod::Man and groff
             #(-t is the default on win32 unless -n is specified)
    #-u   Display unformatted pod text
    #-m   Display module's file in its entirety
    #-n   Specify replacement for groff
    #-l   Display the module's file name
    #-F   Arguments are file names, not modules
    #-D   Verbosely describe what's going on
    #-T   Send output to STDOUT without any pager
    #-d output_filename_to_send_to
    #-o output_format_name
    #-M FormatterModuleNameToUse
    #-w formatter_option:option_value
    #-L translation_code   Choose doc translation (if any)
    #-X   Use index if present (looks for pod.idx at /usr/lib/perl/5.18)
    #-q   Search the text of questions (not answers) in perlfaq[1-9]
    #-f   Search Perl built-in functions
    #-v   Search predefined Perl variables

    # these options require an argument
    if [[ "${prev}" == -@(d|L|m|M|n|o|q) ]] ; then
        return 0
    fi

    _split_longopt && split=true

    case "${prev}" in
        # no completion for these
        -h|-v)
            return 0
            ;;
    esac

    $split && return 0

    case "${cur}" in
        -*)
            COMPREPLY=( $(compgen -W "${lngopt} ${shtopt}" -- "${cur}") )
            return 0
            ;;
        *)
            return 0
            ;;
    esac
} &&
complete -F _perldoc ${nospace} perldoc
# vim:set ft=sh:
