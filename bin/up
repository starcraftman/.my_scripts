#!/usr/bin/env bash
# Update the overall platform and dev tools

sudo -v

# Use parallel when installed. Output will be mixed up.
echo -e "${T_GREEN}Updating $SHELLD repositories${T_RESET}"
if valid_name parallel && valid_name readlink; then
    # readlink just outputs one dir per line easily, otherwise uneeded
    readlink -f "$SHELLD"/* | parallel -j+0 "up_repo {}"
elif valid_name parallel && valid_name tr; then
    echo "$SHELLD"/* | tr ' ' '\n' | parallel -j+0 "up_repo {}"
else
    up_repo "$SHELLD"/*
fi

if [ -s ~/.vim/autoload/plug.vim ] && valid_name vim; then
    echo -e "${T_GREEN}Updating vim plugins${T_RESET}"
    vim +PlugUpdate +PlugUpgrade +qa
fi

if [ -s ~/.config/nvim/autoload/plug.vim ] && valid_name nvim; then
    echo -e "${T_GREEN}Updating neovim plugins${T_RESET}"
    nvim +PlugUpdate +PlugUpgrade +qa
fi

if valid_name pkcon; then
    echo -e "${T_GREEN}Updating platform with pkcon${T_RESET}"
    sudo pkcon refresh -y
    sudo pkcon update -y --autoremove
elif valid_name apt-get; then
    echo -e "${T_GREEN}Updating debian platform${T_RESET}"
    sudo apt-get update
    sudo apt-get -y dist-upgrade
    sudo apt-get autoremove
fi

if valid_name snap; then
    echo -e "${T_GREEN}Updating snaps${T_RESET}"
    sudo snap refresh
fi

if valid_name flatpak; then
    echo -e "${T_GREEN}Updating flatpaks${T_RESET}"
    flatpak update
fi

if valid_name rustup; then
    rustup update
fi

if valid_name pakit && [ -d "$OPTDIR" ]; then
    echo -e "${T_GREEN}Updating pakit programs${T_RESET}"
    pakit --conf "$(dirname "$(which up)")/.pakit.yml" update
fi
