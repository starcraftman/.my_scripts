#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
$PATH utility that can ...
  - show all components of path and do sanity checks.
  - replace parts of path with regex.
  - lookup like 'which - a', portable + prints version of exact matches

Color Codes:
    http://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html#8-colors
    Should work (almost) everywhere.
"""
from __future__ import absolute_import, print_function
import glob
import os
import re
import stat
import subprocess as subp
import sys

import argparse

RESET = "\u001b[0m"        # Reset colors
CODES = [
    "\u001b[34;1m",     # Bold Blue
    "\u001b[32;1m",     # Bold Green
    "\u001b[31;1m",     # Bold Red
]
MASK_EXEC = stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH  # File is executable


def header(title, sep="="):
    """ Print a title. """
    print("{}\n{}".format(title, sep * len(title)))


def sub_section(title, lines, pad_len=4, sep='-'):
    """ Format a subsection. """
    pad = pad_len * " "
    msg = "{pad}{}\n{pad}{}\n".format(title, sep * len(title), pad=pad)
    msg += pad + ("\n" + pad).join(lines) + "\n"

    return msg


def is_executable(fname):
    """ True iff is executable file (owner, group or other). """
    return os.path.isfile(fname) and os.stat(fname)[0] & MASK_EXEC


def make_parser():
    """ Return a parser for args. """
    parser = argparse.ArgumentParser(prog=__file__.replace(".py", ""),
                                     description='simple $PATH tool')
    parser.set_defaults(cmd='path_show')
    parser.add_argument('-n', '--nocolor', action="store_true", default=False,
                        help='Turn off ANSI color codes.')
    subs = parser.add_subparsers(title='subcommands',
                                 description='The subcommands')

    sub = subs.add_parser('replace', description="Search & Replace $PATH")
    sub.set_defaults(cmd='path_replace')
    sub.add_argument('terms', nargs='+',
                     help='Format: search:replace, search:replace, ...')

    sub = subs.add_parser('show', description="Show $PATH compoents")
    sub.set_defaults(cmd='path_show')
    sub.add_argument('-n', '--nocolor', action="store_true", default=False,
                     help='Turn off ANSI color codes.')

    sub = subs.add_parser('which', description="Platform agnostic `which -a`")
    sub.set_defaults(cmd='path_which')
    sub.add_argument('look', help='Look for this executable')
    sub.add_argument('-n', '--nocolor', action="store_true", default=False,
                     help='Turn off ANSI color codes.')

    return parser


def parse_replacements(args):
    """
    Process the replacements into internal tuple format.

    Expected Format: search:replace, search:replace.

    Returns: [[search, replace], [search, replace], ...]
    """
    line = " ".join(args.terms).strip()
    return [term.split(':') for term in line.split(',') if term]


def check_path_folder(path):
    """
    Inspect path and warn if:
        - Path does not exist.
        - Path is mistakenly a file.
        - Path has no executable files present at location (if exists)
        - Path does not end in "/bin" suffix (soft warning, possible intended)
        - Path contains a "/bin" folder (empty unless has executables)

    Returns: A list of warning messages, empty list otherwise.
    """
    if os.path.isdir(path):
        warnings = ["NO executables"]
        for fname in glob.glob(os.path.join(path, "*")):
            if is_executable(fname):
                warnings = []
                break
    elif os.path.exists(path):
        warnings = ["Path is FILE"]
    else:
        warnings = ["Path does NOT exist"]

    if not path.endswith("bin"):
        warnings += ["Path does NOT end in \"/bin\""]

    contained_bin = os.path.join(path, "bin")
    if os.path.exists(contained_bin):
        empty = " (EMPTY)"
        for fname in glob.glob(os.path.join(contained_bin, "*")):
            if is_executable(fname):
                empty = ""
        warnings += ["Path CONTAINS a \"/bin\"{}".format(empty)]

    return warnings


def path_replace(args):
    """
    Take a list of replacement tuples (search, replace) re patterns.

    Print out new export line.
    """
    header("Substitutions Made")
    replacements = parse_replacements(args)
    new_parts = []

    for part in os.environ["PATH"].split(":"):
        for search, replace in replacements:
            new_part = re.sub(search, replace, part)
            if part != new_part:
                print(part, "=>", new_part)

        new_parts.append(new_part)

    print("\n\nexport PATH={}".format(":".join(new_parts)))


def path_show(args):
    """ Print $PATH component per line. """
    header("$PATH Components")
    loop_fmt = "{pad}{color}{path}"
    pad = 4

    cnt = 0
    for part in os.environ["PATH"].split(":"):
        color = ""
        if not args.nocolor:
            color = CODES[cnt]
        print(loop_fmt.format(pad=pad * " ", color=color, path=part))

        for warn in check_path_folder(part):
            print("{}X {}".format(pad * 2 * " ", warn))

        cnt = (cnt + 1) % len(CODES)


def check_version(bin_path):
    """
    Given a binary path, check the possible version flags:
        bin_path --version
        bin_path -v
        bin_path -version  (some weridos like java)

    Returns:
        A string made of subsections that are formatted for output.
    """
    lines = []
    for flag in ["--version", "-v", "-version"]:
        title = "$ {} {}".format(bin_path, flag)
        proc = subp.run([bin_path, flag], stdout=subp.PIPE, stderr=subp.STDOUT)
        if proc.returncode == 0:
            lines += sub_section(title,
                                 proc.stdout.decode().split("\n") + [""])
            break
        else:
            lines += sub_section(title, ["ERROR", ""])

    return "".join(lines)


def check_exec(path, exe):
    """
    Check for possible matches to exe at path.
    """
    bin_path = os.path.join(path, exe)
    msg = ""

    if is_executable(bin_path):
        msg += check_version(bin_path)

    matches = glob.glob(os.path.join(path, "*{}*".format(exe)))
    matches = [match for match in matches if match != bin_path]
    if matches:
        lines = []
        for match in matches:
            suffix = ""
            if os.path.islink(match):
                suffix = "  ->  {}".format(os.path.realpath(match))
            lines += ["- {}{}".format(os.path.basename(match), suffix)]
        msg += sub_section("Close Matches", lines)

    return msg


def path_which(args):
    """ Look for all possible matches of executable. """
    header("$PATH Lookup: {}".format(args.look))
    loop_fmt = "{color}{path}"

    cnt = 0
    for part in os.environ["PATH"].split(":"):
        color = ""
        if not args.nocolor:
            color = CODES[cnt]

        msg = check_exec(part, args.look)
        if msg:
            header(loop_fmt.format(color=color, path=part), '-')
            print(msg)
            cnt = (cnt + 1) % len(CODES)


def main():
    """ Main entry. """
    if "PATH" not in os.environ:
        print("No $PATH set! ABORTING!!!")
        sys.exit(1)

    args = make_parser().parse_args()
    func = getattr(sys.modules[__name__], args.cmd)
    try:
        func(args)
    finally:
        # NEVER FORGET, resets colors
        print(RESET)


if __name__ == "__main__":
    main()
